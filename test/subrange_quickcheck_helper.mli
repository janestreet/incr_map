(* Quickcheck utils for subrange_by_rank, used in test and benchmarks *)

open Core
open Quickcheck
open Import
module Key = Int
module Value = Int

type map = Value.t Key.Map.t [@@deriving sexp_of, compare]

type map_op =
  [ `Add_nearby of Key.t * Value.t
  | `Remove of Key.t
  | `Update of Key.t * Value.t
  | `No_change
  ]
[@@deriving sexp_of]

type range = int * int [@@deriving sexp_of, compare]

val map_with_length_gen : ?key_range:range -> int -> map Generator.t
val map_gen : map Generator.t
val map_op_gen : ?key_range:range -> ?none_ratio:float -> unit -> map_op Generator.t

type range_op =
  [ `Change_start of int
  | `Change_end of int
  | `Next_page
  | `Prev_page
  | `Set_range of range (* not generated by default *)
  | `No_change
  ]
[@@deriving sexp_of]

val range_gen : range Generator.t
val range_op_gen : ?none_ratio:float -> unit -> range_op Generator.t
val apply_map_op : map -> map_op -> map
val apply_map_op_incr : map Incr.Var.t -> map_op -> unit
val apply_range_op : range -> range_op -> range
val apply_range_op_incr : range Incr.Var.t -> range_op -> unit
val map_and_range_op_gen : ?key_range:range -> unit -> (map_op * range_op) Generator.t
